// Code generated by mockery v1.0.0. DO NOT EDIT.

package testmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CursorStore is an autogenerated mock type for the CursorStore type
type CursorStore struct {
	mock.Mock
}

// Flush provides a mock function with given fields: ctx
func (_m *CursorStore) Flush(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCursor provides a mock function with given fields: ctx, consumerName
func (_m *CursorStore) GetCursor(ctx context.Context, consumerName string) (string, error) {
	ret := _m.Called(ctx, consumerName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, consumerName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, consumerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCursor provides a mock function with given fields: ctx, consumerName, cursor
func (_m *CursorStore) SetCursor(ctx context.Context, consumerName string, cursor string) error {
	ret := _m.Called(ctx, consumerName, cursor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, consumerName, cursor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
